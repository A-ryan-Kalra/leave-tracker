
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id             String        @id @default(uuid())  
  email          String        @unique
  fullName       String        @map("full_name")
  avatarUrl      String?       @map("avatar_url")
  role           UserRole      @default(TEAM_MEMBER)
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @default(now()) @updatedAt @map("updated_at")

  managerOf      UserManager[] @relation("manager")
  managedBy      UserManager[] @relation("member")

  leaves         LeaveRequest[]
  assignedTypes  UserLeaveType[]

  @@map("users")
}

model UserManager {
  managerId String @map("manager_id")
  memberId  String @map("member_id")

  manager   User   @relation("manager", fields: [managerId], references: [id], onDelete: Cascade)
  member    User   @relation("member", fields: [memberId], references: [id], onDelete: Cascade)

  @@id([managerId, memberId])
  @@map("user_managers")
}

model LeaveType {
  id          String          @id @default(cuid())
  name        String          @unique
  description String?
  isActive    Boolean         @default(true) @map("is_active")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @default(now()) @updatedAt @map("updated_at")

  requests    LeaveRequest[]
  users       UserLeaveType[]

  @@map("leave_type")
}

model LeaveRequest {
  id            String      @id @default(cuid())
  userId        String      @map("user_id")
  leaveTypeId   String      @map("leave_type_id")
  startDate     DateTime    @map("start_date") @db.Date
  endDate       DateTime    @map("end_date") @db.Date
  reason        String?
  status        LeaveStatus @default(PENDING)
  requestedAt   DateTime    @default(now()) @map("requested_at")
  updatedAt     DateTime    @default(now()) @updatedAt @map("updated_at")

  gcalEventId   String?     @map("gcal_event_id")
  gcalSyncedAt  DateTime?   @map("gcal_synced_at")

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  leaveType     LeaveType   @relation(fields: [leaveTypeId], references: [id])

  @@map("leave_request")
}

model UserLeaveType {
  userId      String @map("user_id")
  leaveTypeId String @map("leave_type_id")

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  leaveType   LeaveType @relation(fields: [leaveTypeId], references: [id], onDelete: Cascade)

  @@id([userId, leaveTypeId])
  @@map("user_leave_types")
}

enum UserRole {
  ADMIN
  MANAGER
  TEAM_MEMBER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}